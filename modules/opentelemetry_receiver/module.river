argument "otelcol_metrics_receiver" { }

argument "otelcol_logs_receiver" { }

argument "otelcol_traces_receiver" { }

argument "otelcol_attribute_environment" { }

otelcol.processor.filter "drop_healthchecks" {
	error_mode = "ignore"

	logs {
		log_record = [
			"attributes[\"RequestPath\"] == \"/health\"",
			"attributes[\"RequestPath\"] == \"/healthz\"",
			"attributes[\"RequestPath\"] == \"/health/\"",
			"attributes[\"RequestPath\"] == \"/healthz/\"",
		]
	}

	output {
		metrics = [otelcol.processor.transform.set_environment_label.input]
		logs    = [otelcol.processor.transform.set_environment_label.input]
		traces  = [otelcol.processor.transform.set_environment_label.input]
	}
}

otelcol.processor.transform "set_environment_label" {
	error_mode = "ignore"

	metric_statements {
		context    = "datapoint"
		statements = [
			format(
				"set(attributes[\"environment\"], \"%s\") where \"%s\" != \"\" and attributes[\"environment\"] == nil",
				argument.otelcol_attribute_environment.value,
				argument.otelcol_attribute_environment.value),
		]
	}

	trace_statements {
		context    = "resource"
		statements = [
			format(
				"set(attributes[\"environment\"], \"%s\") where \"%s\" != \"\" and attributes[\"environment\"] == nil",
				argument.otelcol_attribute_environment.value,
				argument.otelcol_attribute_environment.value),
		]
	}

	log_statements {
		context    = "resource"
		statements = [
			format(
				"set(attributes[\"environment\"], \"%s\") where \"%s\" != \"\" and attributes[\"environment\"] == nil",
				argument.otelcol_attribute_environment.value,
				argument.otelcol_attribute_environment.value),
		]
	}

	output {
		metrics = [otelcol.processor.batch.default.input]
		logs    = [otelcol.processor.attributes.set_loki_labels.input]
		traces  = [otelcol.processor.batch.default.input]
	}
}

otelcol.processor.attributes "set_loki_labels" {
	// Moves log records attributes to loki lables/fields.
	// Note: loki.attribute.labels and loki.resource.labels has special meaning, see 
	// https://grafana.com/docs/agent/latest/flow/reference/components/otelcol.exporter.loki
	// Action "insert": new attribute if not already exists.

	// First read tenant id from attributes, if not available ...
	action {
		key    = "loki.attribute.labels"
		action = "insert"
		value  = "tenant_id"
	}
	// ... also try to read from the resource attributes.
	action {
		key    = "loki.resource.labels"
		action = "insert"
		value  = "tenant_id"
	}

	action {
		key    = "loki.resource.labels"
		action = "insert"
		value  = "environment"
	}

	output {
		logs = [otelcol.processor.batch.default.input]
	}
}

otelcol.receiver.otlp "default" {
	grpc {
		endpoint         = "0.0.0.0:4317"
		transport        = "tcp"
		read_buffer_size = "1024KiB"
	}

	http {
		endpoint = "0.0.0.0:4318"
	}

	output {
		metrics = [otelcol.processor.filter.drop_healthchecks.input]
		logs    = [otelcol.processor.filter.drop_healthchecks.input]
		traces  = [otelcol.processor.filter.drop_healthchecks.input]
	}
}

otelcol.processor.batch "default" {
	output {
		metrics = [otelcol.exporter.prometheus.default.input]
		logs    = [otelcol.exporter.loki.default.input]
		traces  = [argument.otelcol_traces_receiver.value]
	}
}

otelcol.exporter.loki "default" {
	forward_to = [argument.otelcol_logs_receiver.value]
}

otelcol.exporter.prometheus "default" {
	forward_to = [argument.otelcol_metrics_receiver.value]
}
